# -*- coding: utf-8 -*-
"""guidebook_klasifikasi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDKkw6lSSbvHePeEW3NXkUljAjipJB4i
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
# Jika ingin menggunakan metode klasifikasi yang lain bagian ini bisa diganti dengan metode yang diinginkan contoh : from sklearn.neighbors import KNeighborsClassifier untuk metode KNN dan from sklearn.tree import DecisionTreeClassifier untuk Decision Tree
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
# Jika ingin menggunakan metrik evaluasi yang lain bagian ini bisa ditambahkan seperti roc_auc_score,roc_curve

# Judul dashboard
st.title('Dashboard Klasifikasi dengan Random Forest')

# Step 1: Upload file CSV
st.header('1. Upload Data CSV')
uploaded_file = st.file_uploader("Pilih file CSV", type="csv")

if uploaded_file is not None:
    # Step 2: Tampilkan tabel data
    df = pd.read_csv(uploaded_file)

    #Preprocessing: Menghilangkan nilai null
    #Pada tahap ini jika data memiliki missing value dan ingin menghapusnya.
    if df.isnull().sum().sum() > 0:
        df = df.dropna()
    st.subheader('Tabel Data Setelah Menghapus nilai null')
    st.dataframe(df)

    # Step 3: Identifikasi variabel target (Y) dan fitur (X)
    st.header('2. Pilih Variabel Target dan Fitur')
    target_column = st.selectbox('Pilih kolom target (Y):', df.columns)
    feature_columns = st.multiselect('Pilih kolom fitur (X):', [col for col in df.columns if col != target_column])

    if target_column and feature_columns:
        X = df[feature_columns]
        Y = df[target_column]

        # Step 4: Split data menjadi data train dan test
        # Penentuan test size bisa disesuaikan ingin membagi data menjadi 70%/30%,80%/20%, 75%/25%
        X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

        # Step 5: Fit model klasifikasi
        model = RandomForestClassifier(random_state=42)
        model.fit(X_train, Y_train)

        # Step 6: Evaluasi model
        st.header('3. Hasil Klasifikasi')
        st.subheader('Laporan Klasifikasi')
        Y_pred = model.predict(X_test)
        report = classification_report(Y_test, Y_pred, output_dict=True)
        st.dataframe(pd.DataFrame(report).transpose())

        # Step 7: Visualisasi Confusion Matrix
        st.subheader('Confusion Matrix')
        cm = confusion_matrix(Y_test, Y_pred)
        fig, ax = plt.subplots(figsize=(8, 6))
        disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)
        disp.plot(cmap='Blues', ax=ax)
        st.pyplot(fig)

        # Step 8: Feature Importance
        st.subheader('Feature Importance')
        feature_importances = pd.Series(model.feature_importances_, index=feature_columns).sort_values(ascending=False)
        fig, ax = plt.subplots(figsize=(8, 6))
        feature_importances.plot(kind='bar', ax=ax, color='skyblue')
        ax.set_title('Feature Importance')
        ax.set_ylabel('Importance')
        ax.set_xlabel('Features')
        st.pyplot(fig)

else:
    st.write("Silakan upload file CSV yang berisi data target dan fitur.")
